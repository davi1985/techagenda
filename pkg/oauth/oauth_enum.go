// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package oauth

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// ProviderGithub is a Provider of type Github.
	ProviderGithub Provider = iota
)

var ErrInvalidProvider = errors.New("not a valid Provider")

const _ProviderName = "github"

var _ProviderMap = map[Provider]string{
	ProviderGithub: _ProviderName[0:6],
}

// String implements the Stringer interface.
func (x Provider) String() string {
	if str, ok := _ProviderMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Provider(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Provider) IsValid() bool {
	_, ok := _ProviderMap[x]
	return ok
}

var _ProviderValue = map[string]Provider{
	_ProviderName[0:6]: ProviderGithub,
}

// ParseProvider attempts to convert a string to a Provider.
func ParseProvider(name string) (Provider, error) {
	if x, ok := _ProviderValue[name]; ok {
		return x, nil
	}
	return Provider(0), fmt.Errorf("%s is %w", name, ErrInvalidProvider)
}

// MarshalText implements the text marshaller method.
func (x Provider) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Provider) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseProvider(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errProviderNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Provider) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Provider(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Provider(v)
	case string:
		*x, err = ParseProvider(v)
	case []byte:
		*x, err = ParseProvider(string(v))
	case Provider:
		*x = v
	case int:
		*x = Provider(v)
	case *Provider:
		if v == nil {
			return errProviderNilPtr
		}
		*x = *v
	case uint:
		*x = Provider(v)
	case uint64:
		*x = Provider(v)
	case *int:
		if v == nil {
			return errProviderNilPtr
		}
		*x = Provider(*v)
	case *int64:
		if v == nil {
			return errProviderNilPtr
		}
		*x = Provider(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Provider(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errProviderNilPtr
		}
		*x = Provider(*v)
	case *uint:
		if v == nil {
			return errProviderNilPtr
		}
		*x = Provider(*v)
	case *uint64:
		if v == nil {
			return errProviderNilPtr
		}
		*x = Provider(*v)
	case *string:
		if v == nil {
			return errProviderNilPtr
		}
		*x, err = ParseProvider(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Provider) Value() (driver.Value, error) {
	return x.String(), nil
}
